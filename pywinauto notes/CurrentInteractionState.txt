how I found this property

Inside inspect.exe/uispy.exe I found this property:

AutomationElement
  General Accessibility
    AccessKey:	""
    AcceleratorKey:	""
    IsKeyboardFocusable:	"False"
    LabeledBy:	"(null)"
    HelpText:	""

  State
    IsEnabled:	"False"
    HasKeyboardFocus:	"False"

  Identification
    ClassName:	"#32770"
    ControlType:	"ControlType.Window"
    Culture:	"(null)"
    AutomationId:	""
    LocalizedControlType:	"Dialog"
    Name:	"FileZilla Client 3.52.2 Setup"
    ProcessId:	"3860 (FileZilla)"
    RuntimeId:	"42 525020"
    IsPassword:	"False"
    IsControlElement:	"True"
    IsContentElement:	"True"

  Visibility
    BoundingRectangle:	"(917, 379, 503, 390)"
    ClickablePoint:	"(null)"
    IsOffscreen:	"False"

ControlPatterns
  Transform
    CanMove:	"False"
    CanResize:	"False"
    CanRotate:	"False"

  Window
    CanMaximize:	"False"
    CanMinimize:	"False"
    IsModal:	"False"
    WindowVisualState:	"Normal"
    WindowInteractionState:	"BlockedByModalWindow"
    IsTopmost:	"False"

Note WindowInteractionState is exactly what we want for detecting whether a control has been blocked by a modal window (popup)

Googling this value brings up the Microsoft docs for the UIA API:

https://docs.microsoft.com/en-us/dotnet/api/system.windows.automation.windowinteractionstate?view=net-5.0
https://docs.microsoft.com/en-us/windows/win32/winauto/uiauto-implementingwindow

Note that it comes under Object -> ValueType -> Enum -> WindowInteractionState

Pywinauto does not have a helper to find this value

It does however have other enums defined, such as https://github.com/pywinauto/pywinauto/blob/ebb174d03e91a1fb358d8ba46af08b44b8c8e181/pywinauto/windows/uia_defines.py#L205 "ScrollAmount_SmallDecrement"

It comes from:
comtypes.gen.UIAutomationClient.ScrollAmount_LargeDecrement

If we print out all the properties from UIAutomation client
print(comtypes.gen.UIAutomationClient.__dict__)

We can see that it definitely exists

lState_Normal': 0, 'WindowVisualState_Maximized': 1, 
'WindowVisualState_Minimized': 2, 
'WindowVisualState': <class 'ctypes.c_long'>, 
'WindowInteractionState_Running': 0, 
'WindowInteractionState_Closing': 1, 
WindowInteractionState_ReadyForUserInteraction': 2, 
'WindowInteractionState_BlockedByModalWindow': 3

Note that we can see how visualstate is implemented:
josh@Josh-PC:~/pywinauto$ grep -ir "VisualState"
pywinauto/controls/uiawrapper.py:            iface.SetWindowVisualState(uia_defs.window_visual_state_minimized)
pywinauto/controls/uiawrapper.py:            iface.SetWindowVisualState(uia_defs.window_visual_state_maximized)
pywinauto/controls/uiawrapper.py:        iface.SetWindowVisualState(uia_defs.window_visual_state_normal)
pywinauto/controls/uiawrapper.py:        ret = iface.CurrentWindowVisualState
pywinauto/windows/uia_defines.py:# values for enumeration 'WindowVisualState'
pywinauto/windows/uia_defines.py:window_visual_state_normal = IUIA().ui_automation_client.WindowVisualState_Normal
pywinauto/windows/uia_defines.py:window_visual_state_maximized = IUIA().ui_automation_client.WindowVisualState_Maximized
pywinauto/windows/uia_defines.py:window_visual_state_minimized = IUIA().ui_automation_client.WindowVisualState_Minimized

But not this one, note the function it uses for the enum "SetWindowVisualState"

This function can be found at 
https://docs.microsoft.com/en-us/dotnet/api/system.windows.automation.windowpattern.setwindowvisualstate?view=net-5.0

which is a WindowPattern function

WindowPattern has WindowVisualState as a property "WindowVisualStateProperty"
WindowPattern has WindowInteractionState as a property "WindowInteractionStateProperty"

to get the current state, pywinauto does iface.CurrentWindowVisualState

therefore, we can access InteractionStateProperty via iface.CurrentInteractionState